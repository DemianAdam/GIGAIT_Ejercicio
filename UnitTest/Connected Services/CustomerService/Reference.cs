//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTest.CustomerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CustomerService.ICustomerService")]
    public interface ICustomerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/Add", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/AddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WCF_Service.Faults.SqlUniqueFault), Action="http://tempuri.org/ICRUDServiceOf_Customer/AddSqlUniqueFaultFault", Name="SqlUniqueFault", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service.Faults")]
        int Add(Models.Customer entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/Add", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(Models.Customer entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/Update", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/UpdateResponse")]
        void Update(Models.Customer entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/Update", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(Models.Customer entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/Delete", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/DeleteResponse")]
        void Delete(Models.Customer entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/Delete", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(Models.Customer entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/SelectAll", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/SelectAllResponse")]
        Models.Customer[] SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/SelectAll", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/SelectAllResponse")]
        System.Threading.Tasks.Task<Models.Customer[]> SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/SelectById", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/SelectByIdResponse")]
        Models.Customer SelectById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUDServiceOf_Customer/SelectById", ReplyAction="http://tempuri.org/ICRUDServiceOf_Customer/SelectByIdResponse")]
        System.Threading.Tasks.Task<Models.Customer> SelectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/SelectAllUnattendedCustomers", ReplyAction="http://tempuri.org/ICustomerService/SelectAllUnattendedCustomersResponse")]
        Models.Customer[] SelectAllUnattendedCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/SelectAllUnattendedCustomers", ReplyAction="http://tempuri.org/ICustomerService/SelectAllUnattendedCustomersResponse")]
        System.Threading.Tasks.Task<Models.Customer[]> SelectAllUnattendedCustomersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICustomerServiceChannel : UnitTest.CustomerService.ICustomerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomerServiceClient : System.ServiceModel.ClientBase<UnitTest.CustomerService.ICustomerService>, UnitTest.CustomerService.ICustomerService {
        
        public CustomerServiceClient() {
        }
        
        public CustomerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(Models.Customer entity) {
            return base.Channel.Add(entity);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(Models.Customer entity) {
            return base.Channel.AddAsync(entity);
        }
        
        public void Update(Models.Customer entity) {
            base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(Models.Customer entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public void Delete(Models.Customer entity) {
            base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(Models.Customer entity) {
            return base.Channel.DeleteAsync(entity);
        }
        
        public Models.Customer[] SelectAll() {
            return base.Channel.SelectAll();
        }
        
        public System.Threading.Tasks.Task<Models.Customer[]> SelectAllAsync() {
            return base.Channel.SelectAllAsync();
        }
        
        public Models.Customer SelectById(int id) {
            return base.Channel.SelectById(id);
        }
        
        public System.Threading.Tasks.Task<Models.Customer> SelectByIdAsync(int id) {
            return base.Channel.SelectByIdAsync(id);
        }
        
        public Models.Customer[] SelectAllUnattendedCustomers() {
            return base.Channel.SelectAllUnattendedCustomers();
        }
        
        public System.Threading.Tasks.Task<Models.Customer[]> SelectAllUnattendedCustomersAsync() {
            return base.Channel.SelectAllUnattendedCustomersAsync();
        }
    }
}
